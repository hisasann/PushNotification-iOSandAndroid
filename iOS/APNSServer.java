import java.io.BufferedInputStream;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.List;import javapns.Push;import javapns.communication.exceptions.CommunicationException;import javapns.communication.exceptions.KeystoreException;import javapns.devices.exceptions.InvalidDeviceTokenFormatException;import javapns.notification.PayloadPerDevice;import javapns.notification.PushNotificationPayload;import javapns.notification.PushedNotification;import javapns.notification.PushedNotifications;import org.json.JSONException;/** * Copyright(c) hisasann</br> *//** * FIXME 機能説明をここに記述してください.<br> * * @author hisasann */public class APNSServer {    /**     * @param args     */    public static void main(String[] args) throws Exception {        iosPushNotification();    }    /**     * iosのPush通知用処理     *     * @throws Exception     */    public static void iosPushNotification() throws Exception {        int success = 0; // 成功数        int error = 0; // 失敗数        List<PayloadPerDevice> payloads = new ArrayList<PayloadPerDevice>();        PushNotificationPayload payload = PushNotificationPayload.complex();        try {            payload.addAlert("Push通知を受信しました"); // push通知時に表示される文言            payload.addBadge(2); // ホームアイコンの右上に表示される数字            payload.addSound(null); // プッシュ通知時の音        } catch (JSONException e) {            throw new Exception("JSON作成エラー: " + e);        }        PayloadPerDevice payloadPerDevice = null;        try {            // client側で取得したtoken            String token = "lakjdsflkajdslfjaldskfjalsdkjflajsdflakjdlfajsldkfjaklsdjfalkf";            payloadPerDevice = new PayloadPerDevice(payload, token);        } catch (InvalidDeviceTokenFormatException e) {            // Tokenフォーマットがおかしいので物理削除            error++;        }        payloads.add(payloadPerDevice);        PushedNotifications notifications = null;        try {            // キーチェーンアクセスから書き出した証明書(.p12ファイル)            File file = new File("development.p12");            FileInputStream fis = new FileInputStream(file);            BufferedInputStream p12 = new BufferedInputStream(fis);            notifications = Push.payloads(p12, "hisasann", // キーチェーンアクセスから証明書(.p12ファイル)を書き出す際に設定したパスワード                    false, // Development:false, Production:true                    payloads);        } catch (CommunicationException e) {            throw new Exception("通信エラー: " + e);        } catch (KeystoreException e) {            throw new Exception("認証鍵エラー: " + e);        }        // APNsから受け取ったメッセージ        for (PushedNotification notification : notifications) {            String iosDeviceToken = notification.getDevice().getToken();            // エラーチェック            if (notification.isSuccessful()) {                success++;                System.out.println("push成功：" + iosDeviceToken);            } else {                error++;                System.out.println("push失敗：" + iosDeviceToken);                // DBから対象Tokenを持つUUIDを一時停止する処理があったほうが良い            }        }        int total = success + error;        System.out.println("全通知件数: " + total + "件");        System.out.println("成功件数　: " + success + "件");        System.out.println("失敗件数　: " + error + "件");    }}